#!/usr/bin/env bash
###############################################################################
#    Copyright (C) 2004, 2009 by Valery Reznic
#    This file is a part of the rpmrebuild project
#    $Id$
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
###############################################################################

function spec_auto_req
{
	if [ "$RPMREBUILD_autorequire" = "no" ]; then
		echo 'AutoReq: no'
		echo '%undefine __find_requires'
	else
		echo 'AutoReq: yes'
		echo '#undefine __find_requires'
	fi
}
function spec_auto_prov
{
	if [ "$RPMREBUILD_autoprovide" = "no" ]; then
		echo 'AutoProv: no'
		echo '%undefine __find_provides'
	else
		echo 'AutoProv: yes'
		echo '#undefine __find_provides'
	fi
}

function spec_md5_compat_digest
{
	if [ "$RPMREBUILD_md5_compat_digest" = "no" ]; then
		: # Do nothing
	else
		echo "%global _binary_filedigest_algorithm 1"
		echo "%global _source_filedigest_algorithm 1"
	fi
}

###############################################################################
# the i18ndomains option for rpm does not exists in old release
# the variable is set by check_i18ndomains function
function spec_query
{
	rpm_qf=$( $1 )
	local RPM_QUERY
	RPM_QUERY="rpm --query $i18ndomains $RPMREBUILD_package_flag --queryformat "
	$RPM_QUERY "$rpm_qf" "$RPMREBUILD_PAQUET" || Error "(spec_query) $rpm_qf" || return
	return 0
}

# build the list of files in package
function spec_files
{
	rm -f "$FILES_IN" || Erro "spec_files rm $FILES_IN" || return
	spec_query qf_spec_files > "$FILES_IN" || Error "(spec_files) spec_query qf_spec_files" || return
	/bin/bash "$MY_LIB_DIR"/rpmrebuild_files.sh < "$FILES_IN" || Error "(spec_files) rpmrebuild_files.sh" || return
	return 0
}

function spec_preamble
{

	if [ -z "$RELEASE_NEW" ]; then
		spec_query qf_spec_preamble                         || Error "(spec_preamble) spec_query qf_spec_preamble" || return
	else
		# Comment out Orig Release and add New one.
		local sed_release="/Release[[:space:]]*:/{s/^/#/;a\\
Release:       $RELEASE_NEW
	}"
		spec_query qf_spec_preamble | sed -e "$sed_release" || Error "(spec_preamble) spec_query qf_spec_preamble with sed" || return
	fi
}

function spec_provides
{
	# gpg key can not be provided
	# let us remove it.

	# Comment out Provides with pgp()
	local sed_provides='/Provides[[:space:]]*:[[:space:]]*gpg(.*)/s/^/#/'
	[ "$RPMREBUILD_autoprovide" = "yes" ] && sed_provides="$sed_provides$sed_comment"
	spec_query qf_spec_provides | sed -e "$sed_provides" || Error "(spec_provides) spec_query qf_spec_provides" || return
	return 0
}

function spec_requires
{
	# rpmlib dependencies are insert during rpm building
	# let us remove it.

	# Comment out Requires with rpmlib()
	local sed_requires='/Requires[[:space:]]*:[[:space:]]*rpmlib(.*)/s/^/#/'
	[ "$RPMREBUILD_autorequire" = "yes" ] && sed_requires="$sed_requires$sed_comment"
	TestAwk
	# shellcheck disable=SC2181
	if [ "$?" -eq 0 ]
	then
		# current code using awk to decode
		spec_query qf_spec_requires_raw | decode_requires \
			| sed -e "$sed_requires" || Error "(spec_requires) spec_query qf_spec_requires_raw" || return
	else
		# old code without awk for old distributions
		spec_query qf_spec_requires | sed -e "$sed_requires" || Error "(spec_requires) spec_query qf_spec_requires" || return
	fi
	return 0
}

function decode_requires
{
	# Decode the REQUIREFLAGS bits to dependency attributes.
	# Bits are defined in lib/rpmlib.h in the rpm source code.
	# separator must be the same as in qf_spec_requires_raw
	awk -F, '
	    BEGIN {
		PRE    = lshift(1,  9);
		POST   = lshift(1, 10);
		PREUN  = lshift(1, 11);
		POSTUN = lshift(1, 12);
	    }
	    {
		if ($2 == "if") {
			printf("Requires: ");
			for (i=1;i<NF;i++) {
				printf("%s "), $i;
			}
			printf("\n");
		} else {
			attr="";
			if (and($2, PRE))    attr = (attr=="" ? "pre"    : attr ",pre")
			if (and($2, POST))   attr = (attr=="" ? "post"   : attr ",post")
			if (and($2, PREUN))  attr = (attr=="" ? "preun"  : attr ",preun")
			if (and($2, POSTUN)) attr = (attr=="" ? "postun" : attr ",postun")
			if (attr=="") {
			    req = "Requires:"
			} else {
			    req = "Requires(" attr "):";
			}
			printf("%-14s %s %s %s\n", req, $1, $3, $4);
		}
	    }
	    '
	return
}

function SpecGeneration
{
	local i=1
	Debug "(SpecGeneration) $i"
	# Comment Out every string
	local sed_comment=';s/^/#/'

	spec_preamble                  > "$SPEC_PREAMBLE.$i"      || Error "(SpecGeneration) spec_preamble" || return
	spec_query qf_spec_conflicts    > "$SPEC_CONFLICTS.$i"    || Error "(SpecGeneration) qf_spec_conflicts" || return
	spec_query qf_spec_obsoletes    > "$SPEC_OBSOLETES.$i"    || Error "(SpecGeneration) qf_spec_obsoletes" || return
	spec_provides                  > "$SPEC_PROVIDES.$i"      || Error "(SpecGeneration) spec_provides" || return
	spec_requires                  > "$SPEC_REQUIRES.$i"      || Error "(SpecGeneration) spec_requires" || return
	spec_query qf_spec_suggest	> "$SPEC_SUGGESTS.$i"     || Error "(SpecGeneration) qf_spec_suggest" || return
	spec_query qf_spec_enhance	> "$SPEC_ENHANCES.$i"     || Error "(SpecGeneration) qf_spec_enhance" || return
	spec_query qf_spec_recommends	> "$SPEC_RECOMMENDS.$i"   || Error "(SpecGeneration) qf_spec_recommends" || return
	spec_query qf_spec_supplements	> "$SPEC_SUPPLEMENTS.$i"  || Error "(SpecGeneration) qf_spec_supplements" || return
	spec_query qf_spec_description  > "$SPEC_DESCRIPTION.$i"  || Error "(SpecGeneration) qf_spec_description" || return
	spec_files                      > "$SPEC_FILES.$i"        || Error "(SpecGeneration) spec_files" || return
	spec_query qf_spec_triggers     > "$SPEC_TRIGGERS.$i"     || Error "(SpecGeneration) qf_spec_triggers" || return
	spec_query qf_spec_filetriggers > "$SPEC_FILETRIGGERS.$i"     || Error "(SpecGeneration) qf_spec_filetriggers" || return
	spec_query qf_spec_transfiletriggers > "$SPEC_TRANSFILETRIGGERS.$i"     || Error "(SpecGeneration) qf_spec_transfiletriggers" || return
	spec_query qf_spec_pre          > "$SPEC_PRE.$i"          || Error "(SpecGeneration) qf_spec_pre" || return
	spec_query qf_spec_pretrans     > "$SPEC_PRETRANS.$i"     || Error "(SpecGeneration) qf_spec_pretrans" || return
	spec_query qf_spec_post         > "$SPEC_POST.$i"         || Error "(SpecGeneration) qf_spec_post" || return
	spec_query qf_spec_posttrans    > "$SPEC_POSTTRANS.$i"    || Error "(SpecGeneration) qf_spec_posttrans" || return
	spec_query qf_spec_preun        > "$SPEC_PREUN.$i"        || Error "(SpecGeneration) qf_spec_preun" || return
	spec_query qf_spec_postun       > "$SPEC_POSTUN.$i"       || Error "(SpecGeneration) qf_spec_postun" || return
	spec_query qf_spec_verifyscript > "$SPEC_VERIFYSCRIPT.$i" || Error "(SpecGeneration) qf_spec_verifyscript" || return
	spec_query qf_spec_changelog    > "$SPEC_CHANGELOG.$i"    || Error "(SpecGeneration) qf_spec_changelog" || return

	return 0
}

function spec_concatenate
{
	Debug '(spec_concatenate)'
	# duplicate all percent
	local sed_double_percent='s/%/%%/g'
	# %%global
	local sed_global="/^%%global/s/^%%/%/1"

	echo '# rpmrebuild autogenerated specfile' || return
	echo                                       || return
	if [ "$BUILDROOT" = "/" ]; then
		# to bypass a security on mandriva
		echo "%define defaultbuildroot /"
	else
		echo "BuildRoot: $BUILDROOT" || return
	fi       
	spec_auto_prov || Error "(spec_concatenate) spec_auto_prov" || return
	spec_auto_req  || Error "(spec_concatenate) spec_auto_req" || return
	spec_md5_compat_digest || Error "(spec_concatenate) spec_md5_compat_digest" || return

	cat <<-SPEC_DEFS || return
		# Do not try autogenerate prereq/conflicts/obsoletes and check files
		%undefine __check_files
		%undefine __find_prereq
		%undefine __find_conflicts
		%undefine __find_obsoletes
		# Be sure buildpolicy set to do nothing
		%define __spec_install_post %{nil}
		# Something that need for rpm-4.1
		%define _missing_doc_files_terminate_build 0
	SPEC_DEFS

	sed -e "$sed_double_percent"                \
		-e "$sed_global" 	             \
		"$SPEC_PREAMBLE.$si_preamble"         \
		"$SPEC_CONFLICTS.$si_conflicts"       \
		"$SPEC_OBSOLETES.$si_obsoletes"       \
		"$SPEC_PROVIDES.$si_provides"         \
		"$SPEC_REQUIRES.$si_requires"         \
		"$SPEC_SUGGESTS.$si_suggests"         \
		"$SPEC_ENHANCES.$si_enhances"         \
		"$SPEC_RECOMMENDS.$si_recommends"     \
		"$SPEC_SUPPLEMENTS.$si_supplements"   \
		|| Error "(spec_concatenate) sed1 error" || return

	echo                   || return
	echo	"%description" || return
	sed -e "$sed_double_percent"                \
		"$SPEC_DESCRIPTION.$si_description"   \
	|| return

	echo "%files" || return
	cat                                         \
		"$SPEC_FILES.$si_files"               \
	|| return

	# %%triger -> %trigger (in begin of line)
	local sed_trigger="/^%%trigger/s/^%%/%/1"
	local sed_filetrigger="/^%%filetrigger/s/^%%/%/1"
	#local sed_filetrigger="/^%%filetrigger/s/, / /1"
	local sed_transfiletrigger="/^%%transfiletrigger/s/^%%/%/1"
	#local sed_transfiletrigger="/^%%transfiletrigger/s/, / /1"
	# %%pre -> %pre (in begin of line) It'll work for %%preun too.
	local sed_pre="/^%%pre/s/^%%/%/1"
	# %%post -> %post (in begin of line) It'll work for %%postun too.
	local sed_post="/^%%post/s/^%%/%/1"
	# %%verifyscript -> %verifyscript (in begin of line)
	local sed_verifyscript="/^%%verifyscript/s/^%%/%/1"
	sed                                         \
		-e "$sed_double_percent"            \
		-e "$sed_trigger"                   \
		-e "$sed_filetrigger"               \
		-e "$sed_transfiletrigger"          \
		-e "$sed_pre"                       \
		-e "$sed_post"                      \
		-e "$sed_verifyscript"              \
		-e "$sed_global" 	             \
		"$SPEC_TRIGGERS.$si_triggers"         \
		"$SPEC_FILETRIGGERS.$si_filetriggers" \
		"$SPEC_TRANSFILETRIGGERS.$si_transfiletriggers" \
		"$SPEC_PRE.$si_pre"                   \
		"$SPEC_PRETRANS.$si_pretrans"         \
		"$SPEC_POST.$si_post"                 \
		"$SPEC_POSTTRANS.$si_posttrans"       \
		"$SPEC_PREUN.$si_preun"               \
		"$SPEC_POSTUN.$si_postun"             \
		"$SPEC_VERIFYSCRIPT.$si_verifyscript" \
		|| Error "(spec_concatenate) sed2 error" || return

	echo "%changelog" || return
	sed -e "$sed_double_percent"                \
		"$SPEC_CHANGELOG.$si_changelog"       \
	|| return
	return 0
}
